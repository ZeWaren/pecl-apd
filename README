PHP-APD
----------------------------------------------------------------------------- *

    This is an extremely beta howto on how to use this profiler.


Buid/Installation process:
----------------------------------------------------------------------------- *

    Make sure you have installed the CGI version of PHP and it is available
    in yuor current path along with the phpize script.

    Change into the source directory (either created from the downloaded TAR
    archive or from checking out CVS) an run the following commands:

        ./configure
        make install


    This automatically should install the 'php_apd' zend module into your

        <PHP INSTALL PATH>/lib/php/<ZEND VERSION><-OPTIONAL_DEBUG>/

    directory. It isn't mandatory to have it there, in fact you can install
    it anywhere you care.


    In your INI file, add the following lines:

        zend_extension = /absolute/path/to/php_apd.so
        apd.dumpdir = /absolute/path/to/trace/directory

    Depending on your PHP build, the zend_extension directive can be one
    of the following:

        zend_extension              (non ZTS, non debug build)
        zend_extension_ts           (    ZTS, non debug build)
        zend_extension_debug        (non ZTS,     debug build)
        zend_extension_debug_ts     (    ZTS,     debug build)

        zend_extension_debug = /absolute/path/to/php_apd.so

    apd.dumpdir:

        This can either be an absolute path or a relative path. Relative
        means always relative to your where from you run your executeable.


    *** NOTE ******************************************************************
    *
    * If you're running the CGI version of PHP, you will need to add the '-e'
    * flag to enable extended information for apd to work properly:
    *
    *     php -e -f script.php
    *
    ***************************************************************************


Win32ism
----------------------------------------------------------------------------- *

    To build APD under windows you need a working PHP compilation
    environment as described on http://php.net/ (basically, it requires
    you to have MSVC, win32build.zip and bison/flex and some know how
    about how to get it to work). Also make sure that adp.dsp has DOS
    line endings! If it has unix line endings, MSVC will complain about it.

    You can use normal Windows path values for your PHP.INI settings:

        zend_extension_debug_ts = c:\phpdev\php_apd.dll
        apd.dumpdir = c:\phpdev\traces


How to use PHP-APD in your scripts
----------------------------------------------------------------------------- *

    In your PHP script, add the following line:

        apd_set_session_trace(N);

    where N is an integer which is formed by masking together the following
    values:

        FUNCTION_TRACE      1
        ARGS_TRACE          2
        ASSIGNMENT_TRACE    4
        STATEMENT_TRACE     8
        MEMORY_TRACE        16
        TIMING_TRACE        32
        SUMMARY_TRACE       64

    I would seriously not recommend using MEMORY_TRACE.  It is very slow and
    does not appear to be accurate (great, huh?)  also ASSIGNMENT_TRACE is not
    implemented. So, to turn on all functional traces (TIMING, FUNCTIONS, ARGS
    SUMMARY (like strace -c)) use:

        apd_set_session_trace(99);


    Now run your script.


    The dump output will be writting to:

        <apd.dumpdir>/apd_dump_<pid>

    The output itself will look something like:

16:37:51(george@wasabi)[~/src/apd]> cat /tmp/apd_dump_31994 


APD - Advanced PHP Debugger Trace File
---------------------------------------------------------------------------
Process Pid (31994)
Trace Begun at Fri Aug 10 16:37:45 2001
---------------------------------------------------------------------------
(  0.000000): apd_set_session_trace called at somewhere
(  0.001482): apd_set_session_trace() returned.  Elapsed (997475865.364909)
(  0.001563): getcwd() /opt/apache/htdocs/a.php:4
(  0.001628): getcwd() returned.  Elapsed (0.000065)
(  0.001819): require() /opt/apache/htdocs/a.php:6
              ++ argv[0] $(??) = /tmp/a.php
(  0.002231):   getcwd() /tmp/a.php:3
(  0.002290):   getcwd() returned.  Elapsed (0.000059)
(  0.002375):   include_once() /tmp/a.php:4
                ++ argv[0] $(??) = /tmp/aa.php
(  0.003276):   include_once() returned.  Elapsed (0.000901)
(  0.003334): require() returned.  Elapsed (0.001515)
(  0.003381): require_once() /opt/apache/htdocs/a.php:7
              ++ argv[0] $(??) = /tmp/aa.php
(  0.003515): require_once() returned.  Elapsed (0.000134)
(  0.003564): include() /opt/apache/htdocs/a.php:8
              ++ argv[0] $(??) = /tmp/b.php
(  0.003792): include() returned.  Elapsed (0.000228)
(  0.018341): RSHUTDOWN called - end of trace
---------------------------------------------------------------------------
Process Pid (31994)
Trace Ended at Fri Aug 10 16:37:45 2001
---------------------------------------------------------------------------

PProf Output
---------------------------------------------------------------------------
PProf tracing produces output similair to gprof or Perl's Devel::DProf.  In 
the release edition of this software an interpreting utility similair to drofpp
will be provided for generating various outputs from the dump file.  To enable
pprof dumps, simply call

<? apd_set_pprof_trace(); ?>

at the top of your page.  setting this outside of the main block may result in
interpretation errors.  Calling this function will write to a file

    <apd.dumpdir>/pprof.<pid>

The output for a script like:

<?
    apd_set_pprof_trace();
    function hellosleepyhead() {
        sleep(1);
        echo "Hello World<BR>";
    }
    hellosleepyhead();
?>


looks like:

& 1 apd_set_session_trace
+ 1
- 1
@ 0 0 0   0.000121
& 2 hellosleepyhead
+ 2
@ 0 0 0   0.000047
& 3 sleep
+ 3
@ 0 0 101 1.007088
- 3
@ 0 0 0 1.007287
- 2


& declares a new function and it's index for the trace.  + shows a function 
being entered. - shows a function being exited. @ shows a time elapsed in 
the form  

@ process_user_clock_t process_system_clock_t process_real_clock_t wall_seconds




Implemented Debugging Functions
----------------------------------------------------------------------------- *

    array apd_callstack()
        Returns the current call stack as an array (very cool).

    apd_cluck([string warning[,string line delimiter])
        Behaves like perl's Carp::cluck. Throw a warning and a callstack.
        The default line delimiter is "<BR />\n".

    apd_croak([string error[, string line delimiter]])
        Behaves like perl's Carp::croak. Throw an error, a callstack and then
        exit.  The default line delimiter is "<BR />\n".

    array apd_dump_regular_resources()
        Return all current regular resources as an array.

    array apd_dump_persistent_resources()
        Return all persistent resources as an array.

    override_function(string func_name, string func_args, string func_code):
        Syntax similar to create_function(). Overrides built-in functions
        (replaces them in the symbol table).

    rename_function(string orig_name, string new_name)
        Renames orig_name to new_name in the global function_table.  Useful
        for temporarly overriding builtin functions.
